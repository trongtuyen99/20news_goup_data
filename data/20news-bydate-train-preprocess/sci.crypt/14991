from ninassup athena mit edu niko nassuphi subject lga ncrypt sourc organ massachusett institut technolog line nntp post host mit edu got number request code so is it written asm borland tasm do tasm lga asm tlink lga asm the code lga ncryption nick nassuphi code segment assum cs code ds code org start jmp begin ga particl assig bit particl move east bit particl move west bit particl move north bit particl move south bit particl move east bit particl move west bit particl move north bit particl move south collisiong rule ga rule if and then if and then nibbl byte reflect rule swap bit along direct thi look up tabl implement two particl collis hpp lattic ga hpprule db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db thi rule implement veloc revers need to run ga evolut revers it call wallrul particl hit wall head on wallrul db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db maxbyt equ lineno equ srcptr dw offset buffer desptr dw offset buffer savebuff db maxbyt lineno dup buffer db maxbyt lineno dup db dup buffer db maxbyt lineno dup db dup data db db db db thi test lattic ga base encrypt db algorithm the data encod particl db digit ga whose time evolut simul db cellular automaton type algorithm decrypt db achiev run simul revers db thermodynam argument ensur even singl db bit flip decrypt data possibl db db after ga let evolv timestep db one either run revers evolut press db space flip bit run press db db for cryptograph applic key would consist db number time step time locat db specif bit invers db db db db db fill ga piec code initga mov di cs srcptr mov si offset data mov cx lineno ig push di push cx mov cx maxbyt ig mov al cs si mov cs di al inc si inc di loop ig pop cx pop di add di maxbyt loop ig mov si cs srcptr mov di offset initga mov cx maxbyt mov al lg mov byte ptr cs si al not al inc si loop lg ret display ga molecul bounc around showga push es push si push di push cx push bx mov ax mov es ax mov si cs srcptr mov di mov cx lineno add si maxbyt sg push cx push di mov cx maxbyt sg mov al cs si mov byte ptr es di al inc si add di dec cx jnz sg pop di pop cx add di loop sg pop bx pop cx pop di pop si pop es ret cs si sours data cs di destin data first byte special case warparound mov bl al assembl byte mov bh cs si maxbyt north one line up lower and bh bit or bl bh or assembl byte mov bh cs si maxbyt south one line down higher and bh bit or bl bh place stuff al mov bh cs si maxbyt west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte handl loop mov cx maxbyt sol mov bl al assembl byte mov bh cs si maxbyt north one line up lower and bh bit or bl bh or assembl byte mov bh cs si maxbyt south one line down higher and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sol last byte also special mov bl al assembl byte mov bh cs si maxbyt north one line up lower and bh bit or bl bh or assembl byte mov bh cs si maxbyt south one line down higher and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si maxbyt east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di ret cs si sours data cs di destin data scanfirstlin first byte special case warparound mov bl mov bh cs si maxbyt lineno and bh bit or bl bh or assembl byte mov bh cs si maxbyt and bh bit or bl bh place stuff al mov bh cs si maxbyt west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte handl loop mov cx maxbyt sfl mov bl al assembl byte mov bh cs si maxbyt lineno and bh bit or bl bh or assembl byte mov bh cs si maxbyt and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sfl last byte also special mov bl al assembl byte mov bh cs si maxbyt lineno and bh bit or bl bh or assembl byte mov bh cs si maxbyt and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si maxbyt east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al ret cs si sours data cs di destin data scanlastlin first byte special case warparound mov bl al assembl byte mov bh cs si maxbyt and bh bit or bl bh or assembl byte mov bh cs si maxbyt lineno and bh bit or bl bh place stuff al mov bh cs si maxbyt west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di middl byte handl loop mov cx maxbyt sll mov bl al assembl byte mov bh cs si maxbyt and bh bit or bl bh or assembl byte mov bh cs si maxbyt lineno and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di loop sll last byte also special mov bl al assembl byte mov bh cs si maxbyt and bh bit or bl bh or assembl byte mov bh cs si maxbyt lineno and bh bit or bl bh place stuff al mov bh cs si west one byte left lower and bh bit or bl bh mov bh cs si maxbyt east one byte right higher and bh bit or bl bh mov bh mov al byte ptr cs bx offset hpprule mov cs di al inc si inc di ret invert veloc ga invertal push bx push cx push si mov si cs srcptr mov bx mov cx lineno ia push cx mov cx maxbyt ia mov bl cs si mov al byte ptr cs bx offset wallrul mov cs si al inc si loop ia pop cx loop ia pop si pop cx pop bx ret iterateonc mov si cs srcptr mov di cs desptr mov cs srcptr di mov cs desptr si push si push di call scanfirstlin pop di pop si add si maxbyt add di maxbyt mov cx lineno dont scan first last push si push di push cx call pop cx pop di pop si add si maxbyt add di maxbyt loop push si push di call scanlastlin pop si pop di ret iter hpp rule cx time iter push cx call iterateonc pop cx call showga loop iter ret iter hpp rule cx time iterateuntil mov si mov cx offset iu offset iu iu mov al byte ptr cs si offset iu xor byte ptr cs si offset iu al inc si loop iu iu call iterateonc call showga mov si cs srcptr mov cx maxbyt mov bx mov ah mov al iu mov bl byte ptr cs si mov dl byte ptr cs bx wallrul not ah xor dl ah and al dl inc si loop iu mov si mov cx offset iu offset iu iu mov ah byte ptr cs si offset iu and ah al xor byte ptr cs si offset iu ah inc si loop iu jmp iu iu mov ax offset iu push ax ret db dup iu push ax push bx push cx push dx push ds mov ah mov dx cs msgptr int pop ds pop dx pop cx pop bx pop ax ret db dup msgptr dw offset msg msg db thi messag print by db code decrypt use data lattic db which appli decod routin db after everi time step db the decod function left code unchang db except ga evolut completelli db revers thermal time equ repetit enough to equilibr ga begin mov ax mov bh mov dh mov dl mov cx int mov ah mov bh mov dh mov dl int call initga call showga mov ah int push cx mov cx time call iter call invertal call showga mov ah int cmp al jne begin mov si cs srcptr xor byte ptr cs si begin mov cx time call iterateuntil call invertal call showga mov ax int code end end start