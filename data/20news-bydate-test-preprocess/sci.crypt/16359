from ggr koonda acci com au greg rose subject authent one time pad wa re advanc one time pad summari present one time pad base mac organ australian comput commun institut line in articl dbminnehb elang acslab umbc edu olson umbc edu bryan olson cmsc write the one time pad yeild ideal secur well known flaw in authent suppos use random bit stream pad and exclus or encrypt oper if adversari know plaintext messag chang messag here work alic send bob plaintext key stream alic comput ciphertext xor send bob eve know plainext want messag appear eve intercept comput xor xor xor eve send bob bob decrypt comput xor thu receiv fals messag substitut eve firstli asid agre weak exist lot troubl believ repres difficulti real life given purpos one time pad give unbreak secur and expens key distribut etc impli client realli want level secur these peopl want keep secret find hard believ eve might happen copi lie around awar argument appli eve know even small part messag eve must know exactli which byte in known susequ start result garbl find thi least surpris back question if resourc use one time pad transmiss would also append messag authent code messag use up the next bit one time pad key perhap your origin question basic ask whether way authent the messag degre secur pad provid and know answer howev would propos follow for discuss alic bob arbitrari number secret random bit to share eve know she find effect by know correspond it fact they correspond caus problem if messag authent code to be creat use one time pad oper eve could not know part mac affect part input she would unabl forg mac correspond what requir non linear combin part messag non linear simpli xore subtract whatev doesn have exactli effect now end encrypt messag alic append bit mac comput follow mean next full chunk one time pad comput xor pad bit boundari break bit chunk set mac initialis vector chunk sequenti set mac mac nlop at end process mac messag authent code bob verifi mac obviou manner recov the plaintext use pad reproduc mac in the manner nlop non linear oper rub the simplest non linear oper think box is fix even publish permut bit integ index tabl call sbox use nlop xor sbox practic speak think solv problem eve never see intermedi output henc can deduc perform valid substitut it also practic speak want mac fairli larg say bit might want gigabyt say box might work byte size box think irrelev detail for discuss hand who first point error give pointer some literatur greg rose australian comput commun institut ggr acci com au use standard phrase hijack may inadvis caa