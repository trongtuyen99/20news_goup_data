from greg onuf eng sun com greg onuf subject re let build softwar cryptophon internet organ sun microsystem comput corpor mtn view california line distribut usa nntp post host cheer in demon co uk graham toal gtoal gtoal com write in articl regq innn gap caltech edu hal cco caltech edu hal finney write tri code yesterday on sparcstat elc take over second compress second worth speech thi mean it need optim factor usabl in even half duplex mode ouch thank tri it the follow program quick hack creat month ago determin whether sun sparcstat ipc could perform real time full duplex encrypt audio result data rate sustain today modem thi test program read linearli encod audio audio devic compress gsm compress frame bit sampl record khz bit result hz frame rate encrypt it de revers process send reconstruct audio back audio devic the compress encrypt audio stream is kbit my sparcstat ipc not exactli fast machin day certainli slower elc would bare sustain activ audio underrun would occcur speech intellig ran real time process get best result rememb though program quick hack perform can certainli improv the audio compress routin ftp tub cs tu berlin de believ look gsm toast use eric young de implement longer know got from cheer greg cut here test program see much cpu take secur digit audio written onuf greg cheer bungi com written sun ipc run solari sun isdn bu card speakerbox includ stdlib includ unistd includ fcntl includ stdio includ sy type includ sy audioio includ stropt includ gsm includ de boolean_t svs_audio_init int fd audio_info_t prev_info audio_info_t info if prev_info null if ioctl fd audio_getinfo prev_info perror audio_getinfo return b_fals audio_initinfo info info record paus b_true info play paus b_true info play sample_r info play encod info play channel info play precis info record sample_r info record encod info record channel info record precis info record buffer_s if ioctl fd audio_setinfo info perror audio_setinfo return b_fals if ioctl fd i_flush flushrw perror i_flush return b_fals audio_initinfo info info record paus b_fals info play paus b_fals if ioctl fd audio_setinfo info perror audio_setinfo return b_fals return b_true boolean_t svs_in int ifd gsm handl gsm_byte buf gsm_signal sampl if read ifd sampl sizeof sampl sizeof sampl fprintf stderr svs_in short read return b_fals gsm_encod handl sampl buf return b_true boolean_t svs_out int ofd gsm handl gsm_byte buf gsm_signal sampl if gsm_decod handl buf sampl fprintf stderr svs_out gsm_decod fail return b_fals if write ofd sampl sizeof sampl sizeof sampl fprintf stderr svs_out short write return b_fals return b_true main gsm handl gsm_frame frame int audiofd int option des_cblock key ivec_in ivec_out ks_in ks_out des_cblock cbuf_in cbuf_out cbuf_buf audiofd open dev audio o_rdwr if audiofd perror open exit initi gsm compress code if handl gsm_creat null fprintf stderr sv gsm_creat fail exit option b_true if gsm_option handl gsm_opt_fast option fprintf stderr sv gsm_option fast fail exit initi de code des_random_key key if des_set_key key ks_in fprintf stderr sv des_set_key fail exit if des_set_key key ks_out fprintf stderr sv des_set_key fail exit memset ivec_in sizeof ivec_in memset ivec_out sizeof ivec_out open audio devic configur it if svs_audio_init audiofd null exit for get sampl bit linear hz and convert byte frame if svs_in audiofd handl frame exit encrypt decrypt block des_cbc_encrypt frame cbuf_out long ks_in ivec_in des_encrypt des_cbc_encrypt cbuf_out cbuf_buf long ks_out ivec_out des_decrypt memmov frame cbuf_buf if if memcmp cbuf_in cbuf_buf fprintf stderr sv memcmp fail exit endif take byte frame convert sampl play if svs_out audiofd handl frame exit gsm_destroy handl cut here